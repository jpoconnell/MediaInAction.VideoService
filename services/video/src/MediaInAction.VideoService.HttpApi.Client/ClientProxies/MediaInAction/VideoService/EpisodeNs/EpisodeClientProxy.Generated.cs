// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using MediaInAction.VideoService.EpisodeNs;
using MediaInAction.VideoService.EpisodeNs.Dtos;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace MediaInAction.VideoService.EpisodeNs;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IEpisodeAppService), typeof(EpisodeClientProxy))]
public partial class EpisodeClientProxy : ClientProxyBase<IEpisodeAppService>, IEpisodeAppService
{
    public virtual async Task<EpisodeDto> CreateAsync(EpisodeCreateDto input)
    {
        return await RequestAsync<EpisodeDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(EpisodeCreateDto), input }
        });
    }

    public virtual async Task<EpisodeDto> GetAsync(Guid id)
    {
        return await RequestAsync<EpisodeDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<EpisodeDto> GetEpisodeAsync(GetEpisodeInput input)
    {
        return await RequestAsync<EpisodeDto>(nameof(GetEpisodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetEpisodeInput), input }
        });
    }

    public virtual async Task<List<EpisodeDto>> GetEpisodesAsync(GetEpisodesInput input)
    {
        return await RequestAsync<List<EpisodeDto>>(nameof(GetEpisodesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetEpisodesInput), input }
        });
    }

    public virtual async Task SetAsCompleteAsync(Guid id)
    {
        await RequestAsync(nameof(SetAsCompleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task SetAsWatchedAsync(Guid id)
    {
        await RequestAsync(nameof(SetAsWatchedAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<List<EpisodeDto>> GetMyEpisodesAsync(GetMyEpisodesInput input)
    {
        return await RequestAsync<List<EpisodeDto>>(nameof(GetMyEpisodesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetMyEpisodesInput), input }
        });
    }

    public virtual async Task<PagedResultDto<EpisodeDto>> GetListPagedAsync(GetEpisodesInput input)
    {
        return await RequestAsync<PagedResultDto<EpisodeDto>>(nameof(GetListPagedAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetEpisodesInput), input }
        });
    }

    public virtual async Task<DashboardDto> GetDashboardAsync(DashboardInput input)
    {
        return await RequestAsync<DashboardDto>(nameof(GetDashboardAsync), new ClientProxyRequestTypeValue
        {
            { typeof(DashboardInput), input }
        });
    }
}
