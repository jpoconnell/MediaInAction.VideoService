// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using MediaInAction.VideoService.SeriesNs;
using MediaInAction.VideoService.SeriesNs.Dtos;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace MediaInAction.VideoService.SeriesNs;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ISeriesAppService), typeof(SeriesClientProxy))]
public partial class SeriesClientProxy : ClientProxyBase<ISeriesAppService>, ISeriesAppService
{
    public virtual async Task<SeriesDto> GetAsync(Guid id)
    {
        return await RequestAsync<SeriesDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<SeriesDto> CreateAsync(SeriesCreateDto input)
    {
        return await RequestAsync<SeriesDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SeriesCreateDto), input }
        });
    }

    public virtual async Task<SeriesDto> GetSeriesAsync(GetSeriesInput input)
    {
        return await RequestAsync<SeriesDto>(nameof(GetSeriesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetSeriesInput), input }
        });
    }

    public virtual async Task<PagedResultDto<SeriesDto>> GetSeriesListPagedAsync(GetSeriesListInput input)
    {
        return await RequestAsync<PagedResultDto<SeriesDto>>(nameof(GetSeriesListPagedAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetSeriesListInput), input }
        });
    }

    public virtual async Task<DashboardDto> GetSeriesDashboardAsync(DashboardInput input)
    {
        return await RequestAsync<DashboardDto>(nameof(GetSeriesDashboardAsync), new ClientProxyRequestTypeValue
        {
            { typeof(DashboardInput), input }
        });
    }

    public virtual async Task SetAsInActiveAsync(Guid id)
    {
        await RequestAsync(nameof(SetAsInActiveAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<List<SeriesDto>> GetSeriesListAsync(GetSeriesListInput input)
    {
        return await RequestAsync<List<SeriesDto>>(nameof(GetSeriesListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetSeriesListInput), input }
        });
    }

    public virtual async Task ExportSeriesDataAsync()
    {
        await RequestAsync(nameof(ExportSeriesDataAsync));
    }
}
