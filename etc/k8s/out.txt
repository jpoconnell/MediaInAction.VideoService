Release "mia-st" has been upgraded. Happy Helming!
NAME: mia-st
LAST DEPLOYED: Fri May  9 15:48:46 2025
NAMESPACE: mia
STATUS: pending-upgrade
REVISION: 2
TEST SUITE: None
USER-SUPPLIED VALUES:
administration:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    remoteServices:
      abpIdentityBaseUrl: http://identity.mediainaction.dev
      useCurrentToken: "false"
    selfUrl: https://administration.mediainaction.dev
  image:
    repository: mediainaction/service-administration
    tag: 2.4.0
  ingress:
    host: administration.mediainaction.dev
    tlsSecret: mia-wildcard-tls
  synchedCommunication:
    authority: http://account.mediainaction.dev
affinity: {}
autoscaling:
  enabled: false
  maxReplicas: 100
  minReplicas: 1
  targetCPUUtilizationPercentage: 80
cmskit:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
      cmskitService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Cmskit;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    remoteServices:
      abpIdentityBaseUrl: https://identity.mediainaction.dev
    selfUrl: https://cmskit.mediainaction.dev
  image:
    repository: mediainaction/service-cmskit
    tag: 2.4.0
  ingress:
    host: cmskit.mediainaction.dev
    tlsSecret: mia-wildcard-tls
  synchedCommunication:
    authority: http://account.mediainaction.dev
emby:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    remoteServices:
      fileBaseUrl: http://mia-st-file:8080
      fileGrpcUrl: http://mia-st-file:81
    selfUrl: https://emby.mediainaction.dev
  image:
    repository: mediainaction/service-emby
    tag: 2.4.0
  ingress:
    host: emby.mediainaction.dev
    tlsSecret: mia-wildcard-tls
file:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
      fileService: mongodb://mia-st-mongodb/MediaInAction_File
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    kestrel:
      grpcProtocols: Http2
      grpcUrl: http://mia-st-file:81
      httpProtocols: Http1AndHttp2
      httpUrl: http://mia-st-file:8080
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://file.mediainaction.dev
  image:
    repository: mediainaction/service-file
    tag: 2.4.0
  ingress:
    host: file.mediainaction.dev
    tlsSecret: mia-wildcard-tls
fullnameOverride: ""
gateway-web:
  config:
    authServer:
      authority: http://account.mediainaction.dev
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
    corsOrigins: http://admin.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://gateway-web.mediainaction.dev
  image:
    repository: mediainaction/gateway-web
    tag: 2.4.0
  ingress:
    host: gateway-web.mediainaction.dev
    tlsSecret: mia-wildcard-tls
  reRoutes:
    administrationService:
      dns: https://administration.mediainaction.dev
      url: http://mia-st-administration:8080
    cmskitService:
      dns: https://cmskit.mediainaction.dev
      url: http://mia-st-cmskit:8080
    fileService:
      dns: https://file.mediainaction.dev
      url: http://mia-st-file:8080
    identityService:
      dns: https://identity.mediainaction.dev
      url: http://mia-st-identity:8080
    videoService:
      dns: https://video.mediainaction.dev
      url: http://mia-st-video:8080
gateway-web-public:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://gateway-public.mediainaction.dev
  image:
    repository: mediainaction/gateway-web-public
    tag: 2.4.0
  ingress:
    host: gateway-public.mediainaction.dev
    tlsSecret: mia-wildcard-tls
  reRoutes:
    administrationService:
      dns: https://administration.mediainaction.dev
      url: http://mia-st-administration:8080
    cmskitService:
      dns: https://cmskit.mediainaction.dev
      url: http://mia-st-cmskit:8080
    embyService:
      dns: https://emby.mediainaction.dev
      url: http://mia-st-emby:8080
    fileService:
      dns: https://file.mediainaction.dev
      url: http://mia-st-file:8080
    identityService:
      dns: https://identity.mediainaction.dev
      url: http://mia-st-identity:8080
    traktService:
      dns: https://trakt.mediainaction.dev
      url: http://mia-st-trakt:8080
    videoService:
      dns: https://video.mediainaction.dev
      url: http://mia-st-video:8080
identity:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
      identityService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Identity;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    keycloak:
      adminPassword: 1q2w3E*
      adminUsername: admin
      realmName: master
      url: http://mia-st-keycloak
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://identity.mediainaction.dev
  image:
    repository: mediainaction/service-identity
    tag: 2.4.0
  ingress:
    host: identity.mediainaction.dev
    tlsSecret: mia-wildcard-tls
  keycloakClients:
    accountServiceRootUrl: https://account.mediainaction.dev/
    administrationServiceRootUrl: https://administration.mediainaction.dev/
    cmskitServiceRootUrl: https://cmskit.mediainaction.dev/
    embyServiceRootUrl: https://emby.mediainaction.dev/
    fileServiceRootUrl: https://file.mediainaction.dev/
    identityServiceRootUrl: https://identity.mediainaction.dev/
    publicWebGatewayRootUrl: https://gateway-public.mediainaction.dev/
    publicWebRootUrl: https://mediainaction.dev/
    traktServiceRootUrl: https://trakt.mediainaction.dev/
    videoServiceRootUrl: https://video.mediainaction.dev/
    webGatewayRootUrl: https://gateway-web.mediainaction.dev/
    webRootUrl: https://admin.mediainaction.dev/
image:
  pullPolicy: IfNotPresent
  repository: nginx
  tag: ""
imagePullSecrets: []
ingress:
  annotations: {}
  className: ""
  enabled: false
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
keycloak:
  config:
    jgroupsDnsQuery: mia-st-keycloak:8080
    kcDb: postgres
    kcDbPassword: myPassw0rd
    kcDbUrl: jdbc:postgresql://mia-st-postgresdb:5432/keycloak
    kcDbUrlDatabase: keycloak
    kcDbUrlHost: mia-st-postgresdb
    kcDbUrlPort: 5432
    kcDbUsername: postgres
    kcHealthEnabled: true
    kcHostnameAdminUrl: https://account.mediainaction.dev
    kcHostnameStrictBackchannel: false
    kcHostnameUrl: https://account.mediainaction.dev
    kcHttpEnabled: true
    kcHttpRelativePath: /
    kcProxy: edge
    keycloakAdmin: admin
    keycloakAdminPassword: 1q2w3E*
    proxyAddressForwarding: true
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/keycloak/keycloak
    tag: 21.1.1
  ingress:
    host: account.mediainaction.dev
    tlsSecret: mia-wildcard-tls
nameOverride: ""
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
public-web:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      isOnProd: "true"
      metaAddress: http://mia-st-keycloak/realms/master
      requireHttpsMetadata: "false"
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    gatewayUrl: http://mia-st-gateway-web-public:8080/
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://mediainaction.dev
  image:
    repository: mediainaction/app-publicweb
    tag: 2.4.0
  ingress:
    host: mediainaction.dev
    tlsSecret: mia-wildcard-tls
replicaCount: 1
resources: {}
securityContext: {}
service:
  port: 80
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: true
  name: ""
tolerations: []
trakt:
  config:
    authServer:
      authority: http://account.mediainaction.dev
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
      traktService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Trakt;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    remoteServices:
      abpIdentityBaseUrl: https://identity.mediainaction.dev
    selfUrl: https://trakt.mediainaction.dev
  image:
    repository: mediainaction/service-trakt
    tag: 2.4.0
  ingress:
    host: trakt.mediainaction.dev
    tlsSecret: mia-wildcard-tls
video:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
      videoService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Video;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://video.mediainaction.dev
  image:
    repository: mediainaction/service-video
    tag: 2.4.0
  ingress:
    host: video.mediainaction.dev
    tlsSecret: mia-wildcard-tls
web:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: false
      responseType: code
      skipIssuerCheck: true
      strictDiscoveryDocumentValidation: false
    gatewayUrl: https://gateway-web.mediainaction.dev
    selfUrl: https://admin.mediainaction.dev
  image:
    repository: mediainaction/app-web
    tag: 2.4.0
  ingress:
    host: admin.mediainaction.dev
    tlsSecret: mia-wildcard-tls

COMPUTED VALUES:
administration:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
      swaggerClientSecret: 1q2w3e*
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    remoteServices:
      abpIdentityBaseUrl: http://identity.mediainaction.dev
      useCurrentToken: "false"
    selfUrl: https://administration.mediainaction.dev
    stringEncryptionDefaultPassPhrase: gsKnGZ041HLL4IM8
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mediainaction/service-administration
    tag: 2.4.0
  ingress:
    host: administration.mediainaction.dev
    tlsSecret: mia-wildcard-tls
  synchedCommunication:
    authority: http://account.mediainaction.dev
    clientId: null
    clientSecret: null
    grantType: null
    scope: null
affinity: {}
autoscaling:
  enabled: false
  maxReplicas: 100
  minReplicas: 1
  targetCPUUtilizationPercentage: 80
cmskit:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
      swaggerClientSecret: 1q2w3e*
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
      cmskitService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Cmskit;User
        ID=postgres;password=myPassw0rd;Pooling=false
      cmskitervice: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Cmskit;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    remoteServices:
      abpIdentityBaseUrl: https://identity.mediainaction.dev
    selfUrl: https://cmskit.mediainaction.dev
    stringEncryptionDefaultPassPhrase: gsKnGZ041HLL4IM8
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mediainaction/service-cmskit
    tag: 2.4.0
  ingress:
    host: cmskit.mediainaction.dev
    tlsSecret: mia-wildcard-tls
  synchedCommunication:
    authority: http://account.mediainaction.dev
    clientId: null
    clientSecret: null
    grantType: null
    scope: null
emby:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
      swaggerClientSecret: 1q2w3e*
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    remoteServices:
      fileBaseUrl: http://mia-st-file:8080
      fileGrpcUrl: http://mia-st-file:81
    selfUrl: https://emby.mediainaction.dev
    stringEncryptionDefaultPassPhrase: gsKnGZ041HLL4IM8
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mediainaction/service-emby
    tag: 2.4.0
  ingress:
    host: emby.mediainaction.dev
    tlsSecret: mia-wildcard-tls
file:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
      swaggerClientSecret: 1q2w3e*
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
      fileService: mongodb://mia-st-mongodb/MediaInAction_File
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    grpcPort: 81
    kestrel:
      grpcProtocols: Http2
      grpcUrl: http://mia-st-file:81
      httpProtocols: Http1AndHttp2
      httpUrl: http://mia-st-file:8080
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://file.mediainaction.dev
    stringEncryptionDefaultPassPhrase: gsKnGZ041HLL4IM8
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mediainaction/service-file
    tag: 2.4.0
  ingress:
    host: file.mediainaction.dev
    tlsSecret: mia-wildcard-tls
fullnameOverride: ""
gateway-web:
  config:
    authServer:
      authority: http://account.mediainaction.dev
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
      swaggerClientSecret: 1q2w3e*
    corsOrigins: http://admin.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    globalConfigurationBaseUrl: http://mia-st-gateway-web-public
    isOnK8s: "true"
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://gateway-web.mediainaction.dev
    stringEncryptionDefaultPassPhrase: gsKnGZ041HLL4IM8
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mediainaction/gateway-web
    tag: 2.4.0
  ingress:
    host: gateway-web.mediainaction.dev
    tlsSecret: mia-wildcard-tls
  reRoutes:
    accountService:
      url: http://mia-st-keycloak
    administrationService:
      dns: https://administration.mediainaction.dev
      url: http://mia-st-administration:8080
    cmskitService:
      dns: https://cmskit.mediainaction.dev
      url: http://mia-st-cmskit:8080
    fileService:
      dns: https://file.mediainaction.dev
      url: http://mia-st-file:8080
    identityService:
      dns: https://identity.mediainaction.dev
      url: http://mia-st-identity:8080
    videoService:
      dns: https://video.mediainaction.dev
      url: http://mia-st-video:8080
gateway-web-public:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
      swaggerClientSecret: 1q2w3e*
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    isOnK8s: "true"
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://gateway-public.mediainaction.dev
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mediainaction/gateway-web-public
    tag: 2.4.0
  ingress:
    host: gateway-public.mediainaction.dev
    tlsSecret: mia-wildcard-tls
  reRoutes:
    administrationService:
      dns: https://administration.mediainaction.dev
      url: http://mia-st-administration:8080
    cmskitService:
      dns: https://cmskit.mediainaction.dev
      url: http://mia-st-cmskit:8080
    embyService:
      dns: https://emby.mediainaction.dev
      url: http://mia-st-emby:8080
    fileService:
      dns: https://file.mediainaction.dev
      url: http://mia-st-file:8080
    identityService:
      dns: https://identity.mediainaction.dev
      url: http://mia-st-identity:8080
    paymentService:
      dns: https://payment.mediainaction.dev
      url: http://mia-st-payment
    traktService:
      dns: https://trakt.mediainaction.dev
      url: http://mia-st-trakt:8080
    videoService:
      dns: https://video.mediainaction.dev
      url: http://mia-st-video:8080
identity:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
      swaggerClientSecret: 1q2w3e*
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
      identityService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Identity;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    keycloak:
      adminPassword: 1q2w3E*
      adminUsername: admin
      realmName: master
      url: http://mia-st-keycloak
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://identity.mediainaction.dev
    stringEncryptionDefaultPassPhrase: gsKnGZ041HLL4IM8
  env: {}
  global: {}
  identityServerClients:
    accountServiceRootUrl: https://account.mediainaction.dev/
    administrationServiceRootUrl: https://administration.mediainaction.dev/
    cmskitServiceRootUrl: https://cmskit.mediainaction.dev/
    embyServiceRootUrl: https://emby.mediainaction.dev/
    fileServiceRootUrl: https://file.mediainaction.dev/
    identityServiceRootUrl: https://identity.mediainaction.dev/
    publicWebGatewayRootUrl: https://gateway-public.mediainaction.dev/
    publicWebRootUrl: https://mediainaction.dev/
    traktServiceRootUrl: https://trakt.mediainaction.dev/
    videoServiceRootUrl: https://video.mediainaction.dev/
    webGatewayRootUrl: https://gateway-web.mediainaction.dev/
    webRootUrl: https://admin.mediainaction.dev/
  image:
    pullPolicy: IfNotPresent
    repository: mediainaction/service-identity
    tag: 2.4.0
  ingress:
    host: identity.mediainaction.dev
    tlsSecret: mia-wildcard-tls
  keycloakClients:
    accountServiceRootUrl: https://account.mediainaction.dev/
    administrationServiceRootUrl: https://administration.mediainaction.dev/
    cmskitServiceRootUrl: https://cmskit.mediainaction.dev/
    embyServiceRootUrl: https://emby.mediainaction.dev/
    fileServiceRootUrl: https://file.mediainaction.dev/
    identityServiceRootUrl: https://identity.mediainaction.dev/
    paymentServiceRootUrl: null
    publicWebGatewayRootUrl: https://gateway-public.mediainaction.dev/
    publicWebRootUrl: https://mediainaction.dev/
    traktServiceRootUrl: https://trakt.mediainaction.dev/
    videoServiceRootUrl: https://video.mediainaction.dev/
    webGatewayRootUrl: https://gateway-web.mediainaction.dev/
    webRootUrl: https://admin.mediainaction.dev/
image:
  pullPolicy: IfNotPresent
  repository: nginx
  tag: ""
imagePullSecrets: []
ingress:
  annotations: {}
  className: ""
  enabled: false
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
keycloak:
  config:
    dbAddr: mia-st-postgresdb
    dbDatabase: keycloak
    dbPassword: myPassw0rd
    dbUser: postgres
    dbVendor: postgres
    jgroupsDnsQuery: mia-st-keycloak:8080
    kcDb: postgres
    kcDbPassword: myPassw0rd
    kcDbUrl: jdbc:postgresql://mia-st-postgresdb:5432/keycloak
    kcDbUrlDatabase: keycloak
    kcDbUrlHost: mia-st-postgresdb
    kcDbUrlPort: 5432
    kcDbUsername: postgres
    kcHealthEnabled: true
    kcHostnameAdminUrl: https://account.mediainaction.dev
    kcHostnameStrictBackchannel: false
    kcHostnameUrl: https://account.mediainaction.dev
    kcHttpEnabled: true
    kcHttpRelativePath: /
    kcProxy: edge
    keycloakAdmin: admin
    keycloakAdminPassword: 1q2w3E*
    proxyAddressForwarding: true
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/keycloak/keycloak
    tag: 21.1.1
  ingress:
    host: account.mediainaction.dev
    tlsSecret: mia-wildcard-tls
mongodb:
  global: {}
  nodeSelector:
    agentpool: demopool
nameOverride: ""
nodeSelector: {}
payment:
  config:
    authServer:
      authority: http://mia-st-authserver
      metadataAddress: http://mia-st-keycloak:8080
      requireHttpsMetadata: "false"
      swaggerClientId: WebGateway_Swagger
    connectionStrings:
      administrationService: null
      paymentService: null
    corsOrigins: null
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: null
    stringEncryptionDefaultPassPhrase: gsKnGZ041HLL4IM8
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mediainaction/service-payment
    tag: latest
  ingress:
    host: mia-st-payment
    tlsSecret: mia-wildcard-tls
podAnnotations: {}
podSecurityContext: {}
postgresdb:
  global: {}
  nodeSelector:
    agentpool: demopool
public-web:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      isOnProd: "true"
      metaAddress: http://mia-st-keycloak/realms/master
      requireHttpsMetadata: "false"
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    gatewayUrl: http://mia-st-gateway-web-public:8080/
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://mediainaction.dev
    stringEncryptionDefaultPassPhrase: gsKnGZ041HLL4IM8
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mediainaction/app-publicweb
    tag: 2.4.0
  ingress:
    host: mediainaction.dev
    tlsSecret: mia-wildcard-tls
rabbitmq:
  global: {}
  nodeSelector:
    agentpool: demopool
redis:
  global: {}
  nodeSelector:
    agentpool: demopool
replicaCount: 1
resources: {}
securityContext: {}
service:
  port: 80
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: true
  name: ""
tolerations: []
trakt:
  config:
    authServer:
      authority: http://account.mediainaction.dev
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
      swaggerClientSecret: 1q2w3e*
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
      traktService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Trakt;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    remoteServices:
      abpIdentityBaseUrl: https://identity.mediainaction.dev
    selfUrl: https://trakt.mediainaction.dev
  image:
    repository: mediainaction/service-trakt
    tag: 2.4.0
  ingress:
    host: trakt.mediainaction.dev
    tlsSecret: mia-wildcard-tls
video:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      metadataAddress: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: "false"
      swaggerClientId: SwaggerClient
      swaggerClientSecret: 1q2w3e*
    connectionStrings:
      administrationService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User
        ID=postgres;password=myPassw0rd;Pooling=false
      videoService: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Video;User
        ID=postgres;password=myPassw0rd;Pooling=false
    corsOrigins: https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev
    dotnetEnv: Staging
    elasticsearchHost: mia-st-elasticsearch
    rabbitmqHost: mia-st-rabbitmq
    redisHost: mia-st-redis
    selfUrl: https://video.mediainaction.dev
    stringEncryptionDefaultPassPhrase: gsKnGZ041HLL4IM8
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mediainaction/service-video
    tag: 2.4.0
  ingress:
    host: video.mediainaction.dev
    tlsSecret: mia-wildcard-tls
web:
  config:
    authServer:
      authority: https://account.mediainaction.dev/realms/master
      requireHttpsMetadata: false
      responseType: code
      skipIssuerCheck: true
      strictDiscoveryDocumentValidation: false
    gatewayUrl: https://gateway-web.mediainaction.dev
    selfUrl: https://admin.mediainaction.dev
  env: {}
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mediainaction/app-web
    tag: 2.4.0
  ingress:
    host: admin.mediainaction.dev
    tlsSecret: mia-wildcard-tls

HOOKS:
MANIFEST:
---
# Source: mediainaction/charts/gateway-web-public/templates/gateway-web-public-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mia-st-gateway-web-public-configmap
data:
  yarp.json: |-
    {
      "ReverseProxy": {
        "Routes": {
          "AbpApi": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/api/abp/{**catch-all}"
            }
          },
          "Identity Service": {
            "ClusterId": "Identity",
            "Match": {
              "Path": "/api/identity/{**everything}"
            }
          },
          "Identity Service Swagger": {
            "ClusterId": "Identity",
            "Match": {
              "Path": "/swagger-json/Identity/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/Identity" }
            ]
          },
          "FeatureManagement": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/api/feature-management/{**everything}"
            }
          },
          "PermissionManagement": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/api/permission-management/{**everything}"
            }
          },
          "SettingManagement": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/api/setting-management/{**everything}"
            }
          },
          "Administration ServiceSwagger": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/swagger-json/Administration/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/Administration" }
            ]
          },
          "File Service": {
            "ClusterId": "File",
            "Match": {
              "Path": "/api/file/{**everything}"
            }
          },
          "File Service Swagger": {
            "ClusterId": "File",
            "Match": {
              "Path": "/swagger-json/File/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/File" }
            ]
          },
          "ProductPictures": {
            "ClusterId": "File",
            "Match": {
              "Path": "/product-images/{**everything}",
              "Methods": [ "GET" ]
            }
          },
          "Emby Service": {
            "ClusterId": "Emby",
            "Match": {
              "Path": "/api/emby/{**everything}"
            }
          },
          "Emby Service Swagger": {
            "ClusterId": "Emby",
            "Match": {
              "Path": "/swagger-json/Emby/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/Emby" }
            ]
          },
          "Video Service": {
            "ClusterId": "Video",
            "Match": {
              "Path": "/api/video/{**everything}"
            }
          },
          "Video Service Swagger": {
            "ClusterId": "Video",
            "Match": {
              "Path": "/swagger-json/Video/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/Video" }
            ]
          },
          "Cmskit Public Service": {
            "ClusterId": "CmsKit",
            "Match": {
              "Path": "/api/cms-kit-public/{**everything}"
            }
          },
          "Cmskit Admin Service": {
            "ClusterId": "CmsKit",
            "Match": {
              "Path": "/api/cms-kit-admin/{**everything}"
            }
          },
          "Cmskit Service Swagger": {
            "ClusterId": "CmsKit",
            "Match": {
              "Path": "/swagger-json/Cmskit/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/Cmskit" }
            ]
          },
          "Payment Service": {
            "ClusterId": "Payment",
            "Match": {
              "Path": "/api/payment/{**everything}"
            }
          },
          "Payment Service Swagger": {
            "ClusterId": "Payment",
            "Match": {
              "Path": "/swagger-json/payment/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/payment" }
            ]
          },
        },
        "Clusters": {
          "Identity": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-identity:8080",
                "MetaData": {
                  "PublicAddress": "https://identity.mediainaction.dev"
                }
              }
            }
          },
          "Administration": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-administration:8080",
                "MetaData": {
                  "PublicAddress": "https://administration.mediainaction.dev"
                }
              }
            }
          },
          "File": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-file:8080",
                "MetaData": {
                  "PublicAddress": "https://file.mediainaction.dev"
                }
              }
            }
          },
          "Emby": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-emby:8080",
                "MetaData": {
                  "PublicAddress": "https://emby.mediainaction.dev"
                }
              }
            }
          },
          "Video": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-video:8080",
                "MetaData": {
                  "PublicAddress": "https://video.mediainaction.dev"
                }
              }
            }
          },
          "CmsKit": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-cmskit:8080",
                "MetaData": {
                  "PublicAddress": "https://cmskit.mediainaction.dev"
                }
              }
            }
          },
          "Payment": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-payment",
                "MetaData": {
                  "PublicAddress": "https://payment.mediainaction.dev"
                }
              }
            }
          }
        }
      }
    }
---
# Source: mediainaction/charts/gateway-web/templates/gateway-web-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mia-st-gateway-web-configmap
data:
  yarp.json: |-
    {
      "ReverseProxy": {
        "Routes": {
          "AbpApi": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/api/abp/{**catch-all}"
            }
          },
          "EshopOnAbpLocalization": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/api/abp/application-localization"
            }
          },
          "EshopOnAbpApplicationConfiguration": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/api/abp/application-configuration"
            }
          },
          "Identity Service": {
            "ClusterId": "Identity",
            "Match": {
              "Path": "/api/identity/{**everything}"
            }
          },
          "Identity Service Swagger": {
            "ClusterId": "Identity",
            "Match": {
              "Path": "/swagger-json/Identity/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/Identity" }
            ]
          },
          "FeatureManagement": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/api/feature-management/{**everything}"
            }
          },
          "PermissionManagement": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/api/permission-management/{**everything}"
            }
          },
          "SettingManagement": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/api/setting-management/{**everything}"
            }
          },
          "Administration Service Swagger": {
            "ClusterId": "Administration",
            "Match": {
              "Path": "/swagger-json/Administration/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/Administration" }
            ]
          },
          "File Service": {
            "ClusterId": "File",
            "Match": {
              "Path": "/api/file/{**everything}"
            }
          },
          "File Service Swagger": {
            "ClusterId": "File",
            "Match": {
              "Path": "/swagger-json/File/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/File" }
            ]
          },
          "Video Service": {
            "ClusterId": "Video",
            "Match": {
              "Path": "/api/video/{**everything}"
            }
          },
          "Video Service Swagger": {
            "ClusterId": "Video",
            "Match": {
              "Path": "/swagger-json/Video/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/Video" }
            ]
          },
          "Cmskit Service": {
            "ClusterId": "Cmskit",
            "Match": {
              "Path": "/api/cmskit/{**everything}"
            }
          },
          "Cmskit Service Swagger": {
            "ClusterId": "Cmskit",
            "Match": {
              "Path": "/swagger-json/Cmskit/swagger/v1/swagger.json"
            },
            "Transforms": [
              { "PathRemovePrefix": "/swagger-json/Cmskit" }
            ]
          }
        },
        "Clusters": {
          "Identity": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-identity:8080",
                "MetaData": {
                  "PublicAddress": "https://identity.mediainaction.dev"
                }
              }
            }
          },
          "Administration": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-administration:8080",
                "MetaData": {
                  "PublicAddress": "https://administration.mediainaction.dev"
                }
              }
            }
          },
          "File": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-file:8080",
                "MetaData": {
                  "PublicAddress": "https://file.mediainaction.dev"
                }
              }
            }
          },
          "Video": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-video:8080",
                "MetaData": {
                  "PublicAddress": "https://video.mediainaction.dev"
                }
              }
            }
          },
          "Cmskit": {
            "Destinations": {
              "destination1": {
                "Address": "http://mia-st-cmskit:8080",
                "MetaData": {
                  "PublicAddress": "https://cmskit.mediainaction.dev"
                }
              }
            }
          }
        }
      }
    }
---
# Source: mediainaction/charts/web/templates/web-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mia-st-web-configmap
data:
  dynamic-env.json: |-
    {
        "production": "true",
        "application": {
            "baseUrl": "https://admin.mediainaction.dev",
            "name": "MediaInAction",
            "logoUrl": ""
        },
        "oAuthConfig": {
            "issuer": "https://account.mediainaction.dev/realms/master",
            "redirectUri": "https://admin.mediainaction.dev",
            "requireHttps": false,
            "clientId": "Web",
            "responseType": "code",
            "responseType": "code",
            "scope": "offline_access openid profile email phone roles AdministrationService IdentityService EmbyService FileService VideoService PaymentService CmskitService",
            "strictDiscoveryDocumentValidation": false,
            "skipIssuerCheck": true
        },
        "apis": {
            "default": {
                "url": "https://gateway-web.mediainaction.dev",
                "rootNamespace": "MediaInAction"
            }
        }
    }
---
# Source: mediainaction/charts/administration/templates/administration-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-administration
  name: mia-st-administration
spec:
  ports:
    - name: "80"
      port: 8080
    - name: "443"
      port: 443
  selector:
    app: mia-st-administration
---
# Source: mediainaction/charts/cmskit/templates/cmskit-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-cmskit
  name: mia-st-cmskit
spec:
  ports:
    - name: "80"
      port: 8080
    - name: "443"
      port: 443
  selector:
    app: mia-st-cmskit
---
# Source: mediainaction/charts/emby/templates/emby-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-emby
  name: mia-st-emby
spec:
  ports:
    - name: "80"
      port: 8080
    - name: "443"
      port: 443
  selector:
    app: mia-st-emby
---
# Source: mediainaction/charts/file/templates/file-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-file
  name: mia-st-file
spec:
  ports:
    - name: "http"
      port: 8080
      targetPort: http
      protocol: TCP
    - name: grpc
      targetPort: grpc
      protocol: TCP
      port: 81
    - name: "https"
      port: 443
  selector:
    app: mia-st-file
---
# Source: mediainaction/charts/gateway-web-public/templates/gateway-web-public-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-gateway-web-public
  name: mia-st-gateway-web-public
spec:
  ports:
    - name: "80"
      port: 8080
    - name: "443"
      port: 443
  selector:
    app: mia-st-gateway-web-public
---
# Source: mediainaction/charts/gateway-web/templates/gateway-web-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-gateway-web
  name: mia-st-gateway-web
spec:
  ports:
    - name: "80"
      port: 8080
    - name: "443"
      port: 443
  selector:
    app: mia-st-gateway-web
---
# Source: mediainaction/charts/identity/templates/identity-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-identity
  name: mia-st-identity
spec:
  ports:
    - name: "80"
      port: 8080
    - name: "443"
      port: 443
  selector:
    app: mia-st-identity
---
# Source: mediainaction/charts/keycloak/templates/keycloak-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-keycloak
  name: mia-st-keycloak
spec:
  type: ClusterIP
  ports:
    - name: "80"
      port: 80
      targetPort: 8080
    - name: "443"
      port: 443
  selector:
    app: mia-st-keycloak
---
# Source: mediainaction/charts/mongodb/templates/mongodb-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-mongodb
  name: mia-st-mongodb
spec:
  type: ClusterIP
  ports:
    - name: mongodb
      port: 27017
  selector:
    app: mia-st-mongodb
---
# Source: mediainaction/charts/payment/templates/trakt-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-payment
  name: mia-st-payment
spec:
  ports:
    - name: "80"
      port: 8080
    - name: "443"
      port: 443
  selector:
    app: mia-st-payment
---
# Source: mediainaction/charts/postgresdb/templates/postgres-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-postgresdb
  name: mia-st-postgresdb
spec:
  type: ClusterIP
  ports:
    - name: postgres
      port: 5432
  selector:
    app: mia-st-postgresdb
---
# Source: mediainaction/charts/public-web/templates/public-web-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-public-web
  name: mia-st-public-web
spec:
  ports:
    - name: "80"
      port: 8080
    - name: "443"
      port: 443
  selector:
    app: mia-st-public-web
---
# Source: mediainaction/charts/rabbitmq/templates/rabbitmq-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-rabbitmq
  name: mia-st-rabbitmq
spec:
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 15672
      targetPort: 15672
    - name: amqp
      protocol: TCP
      port: 5672
      targetPort: 5672
  selector:
    app: mia-st-rabbitmq
---
# Source: mediainaction/charts/redis/templates/redis-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-redis
  name: mia-st-redis
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
  selector:
    app: mia-st-redis
---
# Source: mediainaction/charts/video/templates/video-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-video
  name: mia-st-video
spec:
  ports:
    - name: "80"
      port: 8080
    - name: "443"
      port: 443
  selector:
    app: mia-st-video
---
# Source: mediainaction/charts/web/templates/web-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mia-st-web
  name: mia-st-web
spec:
  ports:
    - name: "80"
      port: 80
    - name: "443"
      port: 443
  selector:
    app: mia-st-web
---
# Source: mediainaction/charts/administration/templates/administration-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-administration
spec:
  selector:
    matchLabels:
      app: mia-st-administration
  template:
    metadata:
      labels:
        app: mia-st-administration
    spec:
      containers:
      - image: mediainaction/service-administration:2.4.0
        imagePullPolicy: IfNotPresent
        name: mia-st-administration
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 443
        env:
        - name: App__SelfUrl
          value: "https://administration.mediainaction.dev"
        - name: RemoteServices__AbpIdentity__BaseUrl
          value: "http://identity.mediainaction.dev"
        - name: RemoteServices__AbpIdentity__UseCurrentAccessToken
          value: "false" 
        - name: App__CorsOrigins
          value: "https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev"
        - name: "ConnectionStrings__AdministrationService"
          value: "Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User ID=postgres;password=myPassw0rd;Pooling=false"
        - name: "DOTNET_ENVIRONMENT"
          value: "Staging"
        - name: "Redis__Configuration"
          value: "mia-st-redis"
        - name: "AuthServer__Authority"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__RequireHttpsMetadata"
          value: "false"
        - name: "AuthServer__MetadataAddress"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__SwaggerClientId"
          value: "SwaggerClient"
        - name: "StringEncryption__DefaultPassPhrase"
          value: "gsKnGZ041HLL4IM8"
        - name: "RabbitMQ__Connections__Default__HostName"
          value: "mia-st-rabbitmq"
        - name: "ElasticSearch__Url"
          value: "mia-st-elasticsearch"
---
# Source: mediainaction/charts/cmskit/templates/cmskit-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-cmskit
spec:
  selector:
    matchLabels:
      app: mia-st-cmskit
  template:
    metadata:
      labels:
        app: mia-st-cmskit
    spec:
      containers:
      - image: mediainaction/service-cmskit:2.4.0
        imagePullPolicy: IfNotPresent
        name: mia-st-cmskit
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 443
        env:
        - name: App__SelfUrl
          value: "https://cmskit.mediainaction.dev"
        - name: App__CorsOrigins
          value: "https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev"
        - name: "ConnectionStrings__CmskitService"
          value: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Cmskit;User ID=postgres;password=myPassw0rd;Pooling=false  
        - name: "ConnectionStrings__AdministrationService"
          value: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User ID=postgres;password=myPassw0rd;Pooling=false
        - name: "DOTNET_ENVIRONMENT"
          value: "Staging"
        - name: "Redis__Configuration"
          value: "mia-st-redis"
        - name: "RabbitMQ__Connections__Default__HostName"
          value: "mia-st-rabbitmq"
        - name: "ElasticSearch__Url"
          value: "mia-st-elasticsearch"   
        - name: "AuthServer__Authority"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__RequireHttpsMetadata"
          value: "false"
        - name: "AuthServer__MetadataAddress"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__SwaggerClientId"
          value: "SwaggerClient"
        - name: "StringEncryption__DefaultPassPhrase"
          value: "gsKnGZ041HLL4IM8"
        - name: RemoteServices__AbpIdentity__BaseUrl
          value: "https://identity.mediainaction.dev"
        - name: IdentityClients__Default__Authority
          value: "http://account.mediainaction.dev"
        - name: IdentityClients__Default__RequireHttps
          value: "false"
---
# Source: mediainaction/charts/emby/templates/emby-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-emby
spec:
  selector:
    matchLabels:
      app: mia-st-emby
  template:
    metadata:
      labels:
        app: mia-st-emby
    spec:
      containers:
      - image: mediainaction/service-emby:2.4.0
        imagePullPolicy: IfNotPresent
        name: mia-st-emby
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 443
        env:
        - name: App__SelfUrl
          value: "https://emby.mediainaction.dev"
        - name: App__CorsOrigins
          value: "https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://mediainaction.dev"
        - name: "ConnectionStrings__AdministrationService"
          value: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User ID=postgres;password=myPassw0rd;Pooling=false
        - name: "DOTNET_ENVIRONMENT"
          value: "Staging"
        - name: "Redis__Configuration"
          value: "mia-st-redis"
        - name: "RabbitMQ__Connections__Default__HostName"
          value: "mia-st-rabbitmq"
        - name: "ElasticSearch__Url"
          value: "mia-st-elasticsearch"   
        - name: "AuthServer__Authority"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__RequireHttpsMetadata"
          value: "false"
        - name: "AuthServer__MetadataAddress"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__SwaggerClientId"
          value: "SwaggerClient"
        - name: "StringEncryption__DefaultPassPhrase"
          value: "gsKnGZ041HLL4IM8"
        - name: "RemoteServices__File__BaseUrl"
          value: "http://mia-st-file:8080"
        - name: "RemoteServices__File__GrpcUrl"
          value: "http://mia-st-file:81"
---
# Source: mediainaction/charts/file/templates/file-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-file
spec:
  selector:
    matchLabels:
      app: mia-st-file
  template:
    metadata:
      labels:
        app: mia-st-file
    spec:
      containers:
      - image: mediainaction/service-file:2.4.0
        imagePullPolicy: IfNotPresent
        name: mia-st-file
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 81
          protocol: TCP
        - name: https
          containerPort: 443
        env:
        - name: "ASPNETCORE_URLS"
          value: "http://+:8080;http://+:81" 
        - name: "DOTNET_ENVIRONMENT"
          value: "Staging"         
        - name: App__SelfUrl
          value: "https://file.mediainaction.dev"
        - name: App__CorsOrigins
          value: "https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://mediainaction.dev,https://admin.mediainaction.dev"
        - name: "ConnectionStrings__FileService"
          value: "mongodb://mia-st-mongodb/MediaInAction_File"
        - name: "ConnectionStrings__AdministrationService"
          value: "Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User ID=postgres;password=myPassw0rd;Pooling=false"        
        - name: "Redis__Configuration"
          value: "mia-st-redis"
        - name: "RabbitMQ__Connections__Default__HostName"
          value: "mia-st-rabbitmq"
        - name: "ElasticSearch__Url"
          value: "mia-st-elasticsearch"   
        - name: "AuthServer__Authority"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__RequireHttpsMetadata"
          value: "false"
        - name: "AuthServer__MetadataAddress"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__SwaggerClientId"
          value: "SwaggerClient"
        - name: "StringEncryption__DefaultPassPhrase"
          value: "gsKnGZ041HLL4IM8"
        - name: "Kestrel__Endpoints__Http__Url"
          value: "http://mia-st-file:8080"
        - name: "Kestrel__Endpoints__Http__Protocols"
          value: "Http1AndHttp2"
        - name: "Kestrel__Endpoints__gRPC__Url"
          value: "http://mia-st-file:81"
        - name: "Kestrel__Endpoints__gRPC__Protocols"
          value: "Http2"
---
# Source: mediainaction/charts/gateway-web-public/templates/gateway-web-public-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-gateway-web-public
spec:
  selector:
    matchLabels:
      app: mia-st-gateway-web-public
  template:
    metadata:
      labels:
        app: mia-st-gateway-web-public
    spec:
      containers:
      - image: mediainaction/gateway-web-public:2.4.0
        imagePullPolicy: IfNotPresent
        name: mia-st-gateway-web-public
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        volumeMounts:
        - name: config-volume
          mountPath: /app/yarp.json
          subPath: yarp.json
        env:
        - name: App__SelfUrl
          value: "https://gateway-public.mediainaction.dev"
        - name: App__IsOnK8s
          value: "true"
        - name: "DOTNET_ENVIRONMENT"
          value: "Staging"
        - name: "Redis__Configuration"
          value: "mia-st-redis"
        - name: "RabbitMQ__Connections__Default__HostName"
          value: "mia-st-rabbitmq"  
        - name: "AuthServer__Authority"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__RequireHttpsMetadata"
          value: "false"
        - name: "AuthServer__SwaggerClientId"
          value: "SwaggerClient"
        - name: "ElasticSearch__Url"
          value: "mia-st-elasticsearch"
      volumes:
      - name: config-volume
        configMap:
          name: mia-st-gateway-web-public-configmap
---
# Source: mediainaction/charts/gateway-web/templates/gateway-web-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-gateway-web
spec:
  selector:
    matchLabels:
      app: mia-st-gateway-web
  template:
    metadata:
      labels:
        app: mia-st-gateway-web
    spec:
      containers:
      - image: mediainaction/gateway-web:2.4.0
        imagePullPolicy: IfNotPresent
        name: mia-st-gateway-web
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        volumeMounts:
        - name: config-volume
          mountPath: /app/yarp.json
          subPath: yarp.json
        env:
        - name: App__SelfUrl
          value: "https://gateway-web.mediainaction.dev"
        - name: App__CorsOrigins
          value: "http://admin.mediainaction.dev,https://admin.mediainaction.dev"
        - name: App__IsOnK8s
          value: "true"
        - name: "DOTNET_ENVIRONMENT"
          value: "Staging"
        - name: "Redis__Configuration"
          value: "mia-st-redis"
        - name: "RabbitMQ__Connections__Default__HostName"
          value: "mia-st-rabbitmq"  
        - name: "AuthServer__Authority"
          value: "http://account.mediainaction.dev"
        - name: "AuthServer__RequireHttpsMetadata"
          value: "false"
        - name: "AuthServer__SwaggerClientId"
          value: "SwaggerClient"
        - name: "ElasticSearch__Url"
          value: "mia-st-elasticsearch"          
        - name: "StringEncryption__DefaultPassPhrase"
          value: "gsKnGZ041HLL4IM8"
      volumes:
      - name: config-volume
        configMap:
          name: mia-st-gateway-web-configmap
---
# Source: mediainaction/charts/identity/templates/identity-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-identity
spec:
  selector:
    matchLabels:
      app: mia-st-identity
  template:
    metadata:
      labels:
        app: mia-st-identity
    spec:
      containers:
      - image: mediainaction/service-identity:2.4.0
        imagePullPolicy: IfNotPresent
        name: mia-st-identity
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 443
        env:
        - name: App__SelfUrl
          value: "https://identity.mediainaction.dev"
        - name: App__CorsOrigins
          value: "https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev"
        - name: "ConnectionStrings__IdentityService"
          value: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Identity;User ID=postgres;password=myPassw0rd;Pooling=false
        - name: "ConnectionStrings__AdministrationService"
          value: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User ID=postgres;password=myPassw0rd;Pooling=false
        - name: "DOTNET_ENVIRONMENT"
          value: "Staging"
        - name: "Redis__Configuration"
          value: "mia-st-redis"
        - name: "RabbitMQ__Connections__Default__HostName"
          value: "mia-st-rabbitmq"
        - name: "ElasticSearch__Url"
          value: "mia-st-elasticsearch"
        - name: "Keycloak__url"
          value: "http://mia-st-keycloak"
        - name: "Keycloak__adminUsername"
          value: "admin"
        - name: "Keycloak__adminPassword"
          value: "1q2w3E*"
        - name: "Keycloak__realmName"
          value: "master"
        - name: "AuthServer__Authority"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__RequireHttpsMetadata"
          value: "false"
        - name: "AuthServer__MetadataAddress"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__SwaggerClientId"
          value: "SwaggerClient"
        - name: "StringEncryption__DefaultPassPhrase"
          value: "gsKnGZ041HLL4IM8"             
        - name: "Clients__Web__RootUrl"
          value: https://admin.mediainaction.dev/
        - name: "Clients__PublicWeb__RootUrl"
          value: https://mediainaction.dev/
        - name: "Clients__PublicWebGateway__RootUrl"
          value: https://gateway-public.mediainaction.dev/
        - name: "Clients__WebGateway__RootUrl"
          value: https://gateway-web.mediainaction.dev/  
        - name: "Clients__IdentityService__RootUrl"
          value: https://identity.mediainaction.dev/
        - name: "Clients__AdministrationService__RootUrl"
          value: https://administration.mediainaction.dev/
        - name: "Clients__AccountService__RootUrl"
          value: https://account.mediainaction.dev/
        - name: "Clients__EmbyService__RootUrl"
          value: https://emby.mediainaction.dev/
        - name: "Clients__FileService__RootUrl"
          value: https://file.mediainaction.dev/
        - name: "Clients__VideoService__RootUrl"
          value: https://video.mediainaction.dev/
        - name: "Clients__CmskitService__RootUrl"
          value: https://cmskit.mediainaction.dev/
        - name: "Clients__PaymentService__RootUrl"
          value:
---
# Source: mediainaction/charts/keycloak/templates/keycloak-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-keycloak
spec:
  selector:
    matchLabels:
      app: mia-st-keycloak
  template:
    metadata:
      labels:
        app: mia-st-keycloak
    spec:
      containers:
      - image: quay.io/keycloak/keycloak:21.1.1
        imagePullPolicy: IfNotPresent
        args: ["start", "--cache-stack=kubernetes"]
        name: mia-st-keycloak
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        env:      
        - name: "KC_DB"
          value: "postgres"
        - name: "KC_DB_URL"
          value: "jdbc:postgresql://mia-st-postgresdb:5432/keycloak"
        - name: "KC_DB_URL_HOST"
          value: "mia-st-postgresdb"
        - name: "KC_DB_URL_PORT"
          value: "5432"
        - name: "KC_DB_URL_DATABASE"
          value: "keycloak"
        - name: "KC_DB_USERNAME"
          value: "postgres"
        - name: "KC_DB_PASSWORD"
          value: "myPassw0rd"
        - name: "KEYCLOAK_ADMIN"
          value: "admin"
        - name: "KEYCLOAK_ADMIN_PASSWORD"
          value: "1q2w3E*"
        - name: "KC_HEALTH_ENABLED"
          value: "true"
        - name: "KC_HTTP_RELATIVE_PATH"
          value: "/"
        - name: "KC_PROXY"
          value: "edge"
        - name: "PROXY_ADDRESS_FORWARDING"
          value: "true"
        - name: "KC_HTTP_ENABLED"
          value: "true"
        - name: "KC_HOSTNAME_URL"
          value: "https://account.mediainaction.dev"
        - name: "KC_HOSTNAME_ADMIN_URL"
          value: "https://account.mediainaction.dev"
        - name: "jgroups.dns.query"
          value: "mia-st-keycloak:8080"
---
# Source: mediainaction/charts/payment/templates/trakt-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-payment
spec:
  selector:
    matchLabels:
      app: mia-st-payment
  template:
    metadata:
      labels:
        app: mia-st-payment
    spec:
      containers:
      - image: mediainaction/service-payment:latest
        imagePullPolicy: IfNotPresent
        name: mia-st-payment
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 443
        env:
        - name: App__SelfUrl
          value: ""
        - name: App__CorsOrigins
          value: ""
        - name: "ConnectionStrings__PaymentService"
          value:   
        - name: "ConnectionStrings__AdministrationService"
          value: 
        - name: "DOTNET_ENVIRONMENT"
          value: "Staging"
        - name: "Redis__Configuration"
          value: "mia-st-redis"
        - name: "RabbitMQ__Connections__Default__HostName"
          value: "mia-st-rabbitmq"
        - name: "ElasticSearch__Url"
          value: "mia-st-elasticsearch"   
        - name: "AuthServer__Authority"
          value: "http://mia-st-authserver"
        - name: "AuthServer__RequireHttpsMetadata"
          value: "false"
        - name: "AuthServer__MetadataAddress"
          value: "http://mia-st-keycloak:8080"
        - name: "AuthServer__SwaggerClientId"
          value: "WebGateway_Swagger"
        - name: "StringEncryption__DefaultPassPhrase"
          value: "gsKnGZ041HLL4IM8"
---
# Source: mediainaction/charts/public-web/templates/public-web-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-public-web
spec:
  selector:
    matchLabels:
      app: mia-st-public-web
  template:
    metadata:
      labels:
        app: mia-st-public-web
    spec:
      containers:
      - image: mediainaction/app-publicweb:2.4.0
        imagePullPolicy: IfNotPresent
        name: mia-st-public-web
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 443
        env:
        - name: App__SelfUrl
          value: "https://mediainaction.dev" 
        - name: RemoteServices__Default__BaseUrl
          value: "http://mia-st-gateway-web-public:8080/"
        - name: "AuthServer__Authority"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__RequireHttpsMetadata"
          value: "false"
        - name: "AuthServer__IsOnProd"
          value: "true"
        - name: "AuthServer__MetaAddress"
          value: "http://mia-st-keycloak/realms/master"   
        - name: "DOTNET_ENVIRONMENT"
          value: "Staging"
        - name: "Redis__Configuration"
          value: "mia-st-redis"     
        - name: "StringEncryption__DefaultPassPhrase"
          value: "gsKnGZ041HLL4IM8"
        - name: "RabbitMQ__Connections__Default__HostName"
          value: "mia-st-rabbitmq"
        - name: "ElasticSearch__Url"
          value: "mia-st-elasticsearch"
        - name: "ReverseProxy__Clusters__cluster1__Destinations__destination1__Address"
          value: "http://mia-st-gateway-web-public:8080/"
---
# Source: mediainaction/charts/redis/templates/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mia-st-redis
  template:
    metadata:
      labels:
        app: mia-st-redis
    spec:
      containers:
        - image: redis:alpine
          name: mia-st-redis
          ports:
            - name: redis
              containerPort: 6379
---
# Source: mediainaction/charts/video/templates/video-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-video
spec:
  selector:
    matchLabels:
      app: mia-st-video
  template:
    metadata:
      labels:
        app: mia-st-video
    spec:
      containers:
      - image: mediainaction/service-video:2.4.0
        imagePullPolicy: IfNotPresent
        args: ["start", "--cache-stack=kubernetes"]
        name: mia-st-video
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 443
        env:      
        - name: App__SelfUrl
          value: "https://video.mediainaction.dev"
        - name: App__CorsOrigins
          value: "https://gateway-web.mediainaction.dev,https://gateway-public.mediainaction.dev,https://admin.mediainaction.dev"
        - name: "ConnectionStrings__VideoService"
          value: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Video;User ID=postgres;password=myPassw0rd;Pooling=false  
        - name: "ConnectionStrings__AdministrationService"
          value: Host=mia-st-postgresdb;Port=5432;Database=MediaInAction_Administration;User ID=postgres;password=myPassw0rd;Pooling=false
        - name: "DOTNET_ENVIRONMENT"
          value: "Staging"
        - name: "Redis__Configuration"
          value: "mia-st-redis"
        - name: "RabbitMQ__Connections__Default__HostName"
          value: "mia-st-rabbitmq"
        - name: "ElasticSearch__Url"
          value: "mia-st-elasticsearch"   
        - name: "AuthServer__Authority"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__RequireHttpsMetadata"
          value: "false"
        - name: "AuthServer__MetadataAddress"
          value: "https://account.mediainaction.dev/realms/master"
        - name: "AuthServer__SwaggerClientId"
          value: "SwaggerClient"
        - name: "StringEncryption__DefaultPassPhrase"
          value: "gsKnGZ041HLL4IM8"
---
# Source: mediainaction/charts/web/templates/web-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mia-st-web
spec:
  selector:
    matchLabels:
      app: mia-st-web
  template:
    metadata:
      labels:
        app: mia-st-web
    spec:
      containers:
      - image: mediainaction/app-web:2.4.0
        imagePullPolicy: IfNotPresent
        name: mia-st-web
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        volumeMounts:
        - name: config-volume
          mountPath: /usr/share/nginx/html/dynamic-env.json
          subPath: dynamic-env.json
        env:
      volumes:
      - name: config-volume
        configMap:
          name: mia-st-web-configmap
---
# Source: mediainaction/charts/mongodb/templates/mongodb-deployment.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mia-st-mongodb
spec:
  serviceName: mia-st-mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mia-st-mongodb
  template:
    metadata:
      labels:
        app: mia-st-mongodb
    spec:
      containers:
        - image: "mongo:4.2"
          name: mia-st-mongodb
          ports:
            - name: mongo
              containerPort: 27017
---
# Source: mediainaction/charts/postgresdb/templates/postgres-deployment.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mia-st-postgresdb
spec:
  serviceName: mia-st-postgresdb
  replicas: 1
  selector:
    matchLabels:
      app: mia-st-postgresdb
  template:
    metadata:
      labels:
        app: mia-st-postgresdb
    spec:
      containers:
        - image: "postgres:14.1"
          name: mia-st-postgresdb
          ports:
            - name: postgres
              containerPort: 5432
          env:
          - name: POSTGRES_PASSWORD
            value: "myPassw0rd"
          - name: POSTGRES_DB
            value: "keycloak"
---
# Source: mediainaction/charts/rabbitmq/templates/rabbitmq.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mia-st-rabbitmq
spec:
  serviceName: mia-st-rabbitmq
  replicas: 1
  selector:
    matchLabels:
      app: mia-st-rabbitmq
  template:
    metadata:
      labels:
        app: mia-st-rabbitmq
    spec:
      containers:
        - image: rabbitmq:management-alpine
          name: mia-st-rabbitmq
          ports:
            - name: http
              protocol: TCP
              containerPort: 15672
            - name: amqp
              protocol: TCP
              containerPort: 5672
---
# Source: mediainaction/charts/administration/templates/administration-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-administration-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - administration.mediainaction.dev
    secretName: mia-wildcard-tls
  rules:
  - host: "administration.mediainaction.dev"
    http:
      paths:
      - path: /
      
        pathType: Prefix
        backend:
          service:
            name: mia-st-administration
            port:
              number: 80
---
# Source: mediainaction/charts/cmskit/templates/cmskit-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-cmskit-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - cmskit.mediainaction.dev
    secretName: mia-wildcard-tls
  rules:
  - host: "cmskit.mediainaction.dev"
    http:
      paths:
      - path: /
      
        pathType: Prefix
        backend:
          service:
            name: mia-st-cmskit
            port:
              number: 80
---
# Source: mediainaction/charts/emby/templates/emby-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-emby-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - emby.mediainaction.dev
    secretName: mia-wildcard-tls
  rules:
  - host: "emby.mediainaction.dev"
    http:
      paths:
      - path: /
      
        pathType: Prefix
        backend:
          service:
            name: mia-st-emby
            port:
              number: 80
---
# Source: mediainaction/charts/file/templates/file-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-file-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - file.mediainaction.dev
    secretName: mia-wildcard-tls
  rules:
  - host: "file.mediainaction.dev"
    http:
      paths:
      - path: /
      
        pathType: Prefix
        backend:
          service:
            name: mia-st-file
            port:
              number: 8080
---
# Source: mediainaction/charts/gateway-web-public/templates/gateway-web-public-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-gateway-web-public-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - gateway-public.mediainaction.dev
    secretName: mia-wildcard-tls
  rules:
  - host: "gateway-public.mediainaction.dev"
    http:
      paths:
      - path: /
      
        pathType: Prefix
        backend:
          service:
            name: mia-st-gateway-web-public
            port:
              number: 80
---
# Source: mediainaction/charts/gateway-web/templates/gateway-web-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-gateway-web-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - gateway-web.mediainaction.dev
    secretName: mia-wildcard-tls
  rules:
  - host: "gateway-web.mediainaction.dev"
    http:
      paths:
      - path: /
      
        pathType: Prefix
        backend:
          service:
            name: mia-st-gateway-web
            port:
              number: 80
---
# Source: mediainaction/charts/identity/templates/identity-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-identity-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - identity.mediainaction.dev
    secretName: mia-wildcard-tls
  rules:
  - host: "identity.mediainaction.dev"
    http:
      paths:
      - path: /
      
        pathType: Prefix
        backend:
          service:
            name: mia-st-identity
            port:
              number: 80
---
# Source: mediainaction/charts/keycloak/templates/keycloak-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-keycloak-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - account.mediainaction.dev
    secretName: mia-wildcard-tls
  rules:
  - host: "account.mediainaction.dev"
    http:
      paths:
      - path: /
      
        pathType: Prefix
        backend:
          service:
            name: mia-st-keycloak
            port:
              number: 80
---
# Source: mediainaction/charts/payment/templates/trakt-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-payment-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - mia-st-payment
    secretName: mia-wildcard-tls
  rules:
  - host: "mia-st-payment"
    http:
      paths:
      - path: /
      
        pathType: Prefix
        backend:
          service:
            name: mia-st-payment
            port:
              number: 80
---
# Source: mediainaction/charts/public-web/templates/public-web-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-public-web-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - mediainaction.dev
    secretName: mia-wildcard-tls
  rules:
  - host: "mediainaction.dev"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mia-st-public-web
            port:
              number: 80
---
# Source: mediainaction/charts/video/templates/video-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-video-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - video.mediainaction.dev
    secretName: mia-wildcard-tls
  rules:
  - host: "video.mediainaction.dev"
    http:
      paths:
      - path: /
      
        pathType: Prefix
        backend:
          service:
            name: mia-st-video
            port:
              number: 80
---
# Source: mediainaction/charts/web/templates/web-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mia-st-web-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - admin.mediainaction.dev
    secretName: mia-wildcard-tls
  rules:
  - host: "admin.mediainaction.dev"
    http:
      paths:
      - path: /
      
        pathType: Prefix
        backend:
          service:
            name: mia-st-web
            port:
              number: 80

NOTES:
1. Web (Back Office) angular application URL: https://admin.mediainaction.dev
2. Public Web mvc application URL: https://mediainaction.dev
3. Authentication Server URL: account.mediainaction.dev

For RabbitMq Administration use:
"kubectl port-forward services/mia-st-rabbitmq 15672:15672 -n mia"
